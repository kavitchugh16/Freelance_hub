// src/contexts/AuthContext.tsx
import React, { createContext, useContext, useState, useEffect } from 'react';
import axios from 'axios';

// Set axios defaults once to automatically send cookies (credentials) with all API calls
axios.defaults.withCredentials = true; 
const API_BASE_URL = 'http://localhost:8080/api/auth';

interface AuthContextType {
Â  user: any;
Â  loading: boolean;
Â  login: (data: { username: string; password: string }) => Promise<any>;
Â  logout: () => Promise<void>;
Â  register: (data: any) => Promise<any>;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
Â  const [user, setUser] = useState<any>(null);
Â  // ðŸ”‘ IMPORTANT: Start as true to prevent rendering the app before session check is done
Â  const [loading, setLoading] = useState(true); 

    // ðŸ”‘ NEW: Function to check for an existing HTTP-only cookie session
Â  const checkUserSession = async () => {
Â  Â  try {
Â  Â  Â  // Hits the new protected backend route using the existing HTTP-only cookie
Â  Â  Â  const res = await axios.get(`${API_BASE_URL}/session`); 
Â  Â  Â  
Â  Â  Â  if (res.data.user) {
Â  Â  Â  Â  setUser(res.data.user); // Session found, set user
Â  Â  Â  }
Â  Â  } catch (err) {
Â  Â  Â  // This will catch 401/403 (No token/Invalid token)
Â  Â  Â  // The error is expected when no cookie is present, so we keep the user null
Â  Â  Â  console.log('No active session found.');
Â  Â  Â  setUser(null);
Â  Â  } finally {
Â  Â  Â  setLoading(false); // Session check complete, stop loading
Â  Â  }
Â  };

Â  // ðŸ”‘ NEW: Run session check once when the component mounts
Â  useEffect(() => {
Â  Â  checkUserSession();
Â  }, []);


Â  // LOGIN (Updated to use API_BASE_URL)
Â  const login = async (data: { username: string; password: string }) => {
Â  Â  setLoading(true);
Â  Â  try {
Â  Â  Â  const res = await axios.post(`${API_BASE_URL}/login`, data);

Â  Â  Â  if (!res.data.user) {
Â  Â  Â  Â  throw new Error('User not found');
Â  Â  Â  }

Â  Â  Â  setUser(res.data.user); // Save logged-in user
Â  Â  Â  return res.data.user; Â  
Â  Â  } catch (err: any) {
Â  Â  Â  throw err;
Â  Â  } finally {
Â  Â  Â  setLoading(false);
Â  Â  }
Â  };

Â  // LOGOUT (Updated to use API_BASE_URL)
Â  const logout = async () => {
Â  Â  setLoading(true);
Â  Â  try {
Â  Â  Â  await axios.post(`${API_BASE_URL}/logout`);
Â  Â  Â  setUser(null);
Â  Â  } catch (err) {
Â  Â  Â  console.error('Logout failed', err);
Â  Â  } finally {
Â  Â  Â  setLoading(false);
Â  Â  }
Â  };

Â  // REGISTER (Updated to use API_BASE_URL)
Â  const register = async (data: any) => {
Â  Â  setLoading(true);
Â  Â  try {
Â  Â  Â  const url =
Â  Â  Â  Â  data.role === 'client'
Â  Â  Â  Â  Â  ? `${API_BASE_URL}/register/client`
Â  Â  Â  Â  Â  : `${API_BASE_URL}/register/freelancer`;

Â  Â  Â  const res = await axios.post(url, data);

Â  Â  Â  if (res.status === 201 || res.status === 200) {
Â  Â  Â  Â  return res.data;
Â  Â  Â  } else {
Â  Â  Â  Â  throw new Error(res.data?.message || 'Registration failed');
Â  Â  Â  }
Â  Â  } catch (err: any) {
Â  Â  Â  throw err;
Â  Â  } finally {
Â  Â  Â  setLoading(false);
Â  Â  }
Â  };

Â  // ðŸ”‘ Prevent rendering children until session check is done
Â  if (loading) {
Â    // You should wrap your whole app with AuthProvider and put a simple loading screen here
Â    return <div className="loading-screen">Authenticating session...</div>; 
Â  }

Â  return (
Â  Â  <AuthContext.Provider value={{ user, loading, login, logout, register }}>
Â  Â  Â  {children}
Â  Â  </AuthContext.Provider>
Â  );
};

// CUSTOM HOOK
export const useAuth = () => {
Â  const context = useContext(AuthContext);
Â  if (!context) throw new Error('useAuth must be used within AuthProvider');
Â  return context;
};